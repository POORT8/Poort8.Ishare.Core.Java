import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import poort8.ishare.core.Authorization;
public class AuthorizationTest {

    @Test void VerifyAccessReturnsTrue() {
        String token = ".eyJpc3MiOiJFVS5FT1JJLk5MMDAwMDAwMDA0Iiwic3ViIjoiRVUuRU9SSS5OTDAwMDAwMDAwMSIsImp0aSI6ImQ4YTdmZDc0NjU3NTRhNGE5MTE3ZWUyOGY1YjdmYjYwIiwiaWF0IjoxNTkxOTY2MjI0LCJleHAiOjE1OTE5NjYyNTQsImF1ZCI6IkVVLkVPUkkuTkwwMDAwMDAwMDEiLCJkZWxlZ2F0aW9uRXZpZGVuY2UiOnsibm90QmVmb3JlIjoxNTQxMDU4OTM5LCJub3RPbk9yQWZ0ZXIiOjIxNDc0ODM2NDcsInBvbGljeUlzc3VlciI6IkVVLkVPUkkuTkwwMDAwMDAwMDUiLCJ0YXJnZXQiOnsiYWNjZXNzU3ViamVjdCI6IkVVLkVPUkkuTkwwMDAwMDAwMDEifSwicG9saWN5U2V0cyI6W3sibWF4RGVsZWdhdGlvbkRlcHRoIjowLCJ0YXJnZXQiOnsiZW52aXJvbm1lbnQiOnsibGljZW5zZXMiOlsiSVNIQVJFLjAwMDEiXX19LCJwb2xpY2llcyI6W3sidGFyZ2V0Ijp7InJlc291cmNlIjp7InR5cGUiOiJHUzEuQ09OVEFJTkVSIiwiaWRlbnRpZmllcnMiOlsiMTgwNjIxLkNPTlRBSU5FUi1aIl0sImF0dHJpYnV0ZXMiOlsiR1MxLkNPTlRBSU5FUi5BVFRSSUJVVEUuRVRBIiwiR1MxLkNPTlRBSU5FUi5BVFRSSUJVVEUuV0VJR0hUIl19LCJlbnZpcm9ubWVudCI6eyJzZXJ2aWNlUHJvdmlkZXJzIjpbIkVVLkVPUkkuTkwwMDAwMDAwMDMiXX0sImFjdGlvbnMiOlsiSVNIQVJFLlJFQUQiLCJJU0hBUkUuQ1JFQVRFIiwiSVNIQVJFLlVQREFURSIsIklTSEFSRS5ERUxFVEUiXX0sInJ1bGVzIjpbeyJlZmZlY3QiOiJQZXJtaXQifV19XX1dfX0.mdnNbj4b7u6YmCbzxk0Sn2wvceo9dG_7mikMcpxUG4JLf3Yd4dovUL10y_OaqLmSgxe7yYtacV5PPeOvZX4DFXv-aMxF_ueBTgqm1A8GCMfxd5gBO848tUmp0KAJJ-VlRGUDjxZIZ_CEvW8iAXjUhVsbwMDOrzRKvg6O3bBEfiqCowumygOk7oGaYwQP0eF21VvKiGyNAOOm6mw6a9WyCVmFSg3imjbF2H60HI8abnr3-0xGmRo4IuNSX57BplcaKo1GXrJTaTkOTF9vzKKXdrxvoBpnx2VcZqfI69UBGQHZOs4WA7noF3kEyhZR2pP3_8XGvClEExjn_R496m0aaQ";
        boolean actual = Authorization.VerifyAccess(token, "EU.EORI.NL000000005", "EU.EORI.NL000000001", "GS1.CONTAINER","180621.CONTAINER-Z", "ISHARE.READ");
        Assertions.assertTrue(actual);
    }

    @Test void VerifyAccessReturnsFalse() {
        String token = ".eyJpc3MiOiJFVS5FT1JJLk5MMDAwMDAwMDA0Iiwic3ViIjoiRVUuRU9SSS5OTDAwMDAwMDAwMSIsImp0aSI6ImQ4YTdmZDc0NjU3NTRhNGE5MTE3ZWUyOGY1YjdmYjYwIiwiaWF0IjoxNTkxOTY2MjI0LCJleHAiOjE1OTE5NjYyNTQsImF1ZCI6IkVVLkVPUkkuTkwwMDAwMDAwMDEiLCJkZWxlZ2F0aW9uRXZpZGVuY2UiOnsibm90QmVmb3JlIjoxNTQxMDU4OTM5LCJub3RPbk9yQWZ0ZXIiOjIxNDc0ODM2NDcsInBvbGljeUlzc3VlciI6IkVVLkVPUkkuTkwwMDAwMDAwMDUiLCJ0YXJnZXQiOnsiYWNjZXNzU3ViamVjdCI6IkVVLkVPUkkuTkwwMDAwMDAwMDEifSwicG9saWN5U2V0cyI6W3sibWF4RGVsZWdhdGlvbkRlcHRoIjowLCJ0YXJnZXQiOnsiZW52aXJvbm1lbnQiOnsibGljZW5zZXMiOlsiSVNIQVJFLjAwMDEiXX19LCJwb2xpY2llcyI6W3sidGFyZ2V0Ijp7InJlc291cmNlIjp7InR5cGUiOiJHUzEuQ09OVEFJTkVSIiwiaWRlbnRpZmllcnMiOlsiMTgwNjIxLkNPTlRBSU5FUi1aIl0sImF0dHJpYnV0ZXMiOlsiR1MxLkNPTlRBSU5FUi5BVFRSSUJVVEUuRVRBIiwiR1MxLkNPTlRBSU5FUi5BVFRSSUJVVEUuV0VJR0hUIl19LCJlbnZpcm9ubWVudCI6eyJzZXJ2aWNlUHJvdmlkZXJzIjpbIkVVLkVPUkkuTkwwMDAwMDAwMDMiXX0sImFjdGlvbnMiOlsiSVNIQVJFLlJFQUQiLCJJU0hBUkUuQ1JFQVRFIiwiSVNIQVJFLlVQREFURSIsIklTSEFSRS5ERUxFVEUiXX0sInJ1bGVzIjpbeyJlZmZlY3QiOiJQZXJtaXQifV19XX1dfX0.mdnNbj4b7u6YmCbzxk0Sn2wvceo9dG_7mikMcpxUG4JLf3Yd4dovUL10y_OaqLmSgxe7yYtacV5PPeOvZX4DFXv-aMxF_ueBTgqm1A8GCMfxd5gBO848tUmp0KAJJ-VlRGUDjxZIZ_CEvW8iAXjUhVsbwMDOrzRKvg6O3bBEfiqCowumygOk7oGaYwQP0eF21VvKiGyNAOOm6mw6a9WyCVmFSg3imjbF2H60HI8abnr3-0xGmRo4IuNSX57BplcaKo1GXrJTaTkOTF9vzKKXdrxvoBpnx2VcZqfI69UBGQHZOs4WA7noF3kEyhZR2pP3_8XGvClEExjn_R496m0aaQ";
        boolean actual = Authorization.VerifyAccess(token, "EU.EORI.NL000000002", "EU.EORI.NL000000001", "GS1.CONTAINER","180621.CONTAINER-Z", "ISHARE.READ");
        Assertions.assertFalse(actual);
    }
}
